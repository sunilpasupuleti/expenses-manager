on:
  push:
    branches:
      - master
name: ðŸš€ Deploy to Ec2
jobs:
  web-deploy:
    name: ðŸŽ‰ Deploy
    runs-on: ubuntu-latest
    steps:
      - name: ðŸšš Get latest code
        uses: actions/checkout@v3

      - name: ðŸ“‚ Deploying web dist into webiwzard.in server
        uses: SamKirkland/FTP-Deploy-Action@4.3.2
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./web/dist/
          server-dir: /expenses-manager.webwizard.in/
          exclude: |
            **/.git*
            **/.git*/**
            **/.vscode*/**
            **/.DS_STORE*/**
            **/node_modules/**
            **/__MACOSX/**

      - name: ðŸ“‚ Deploying Grapics into webiwzard.in server
        uses: SamKirkland/FTP-Deploy-Action@4.3.2
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./graphics/
          server-dir: /expenses-manager.webwizard.in/graphics/
          exclude: |
            **/.git*
            **/.git*/**
            **/.vscode*/**
            **/.DS_STORE*/**
            **/node_modules/**
            **/__MACOSX/**

      - name: ðŸ“‚ Deploy in EC2 Instance
        uses: easingthemes/ssh-deploy/@main
        env:
          SSH_PRIVATE_KEY: ${{secrets.AWS_PEM_KEY}}
          SOURCE: "./"
          REMOTE_HOST: ${{secrets.HOST_NAME}}
          REMOTE_USER: ${{secrets.USER_NAME}}
          TARGET: "/home/ubuntu/expenses-manager/"

      - name: Executing commands in EC2 Instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.HOST_NAME}}
          username: ${{secrets.USER_NAME}}
          key: ${{secrets.AWS_PEM_KEY}}
          port: 22
          script: |
            source ~/.bashrc
            source ~/.nvm/nvm.sh
            sudo chown -hR ubuntu:ubuntu expenses-manager/
            npm -g install create-react-app
            rm -rf /var/www/html/expenses-manager
            mkdir /var/www/html/expenses-manager
            cd /home/ubuntu/expenses-manager/web/
            rm .env
            touch .env
            echo "${{secrets.WEB_ENV_FILE}}" | base64 --decode > .env

            cp -a dist/. /var/www/html/expenses-manager/


            cd /home/ubuntu/expenses-manager/backend/

            docker stop expenses-manager-backend
            docker rm  expenses-manager-backend
            docker rmi expenses-manager-backend
            rm config/.env
            rm config/expensesmanager.json
            rm -rf config/ssl
            mkdir config/ssl

            touch config/.env
            touch config/expensesmanager.json
            touch config/ssl/ca_bundle.crt
            touch config/ssl/certificate.crt
            touch config/ssl/private.crt


            echo "${{secrets.BACKEND_ENV_FILE}}" | base64 --decode > config/.env
            echo "${{secrets.EXPENSES_MANAGER_JSON}}" | base64 --decode > config/expensesmanager.json
            echo "${{secrets.SSL_CA_BUNDLE}}" | base64 --decode > config/ssl/ca_bundle.crt
            echo "${{secrets.SSL_PRIVATE}}" | base64 --decode > config/ssl/private.crt
            echo "${{secrets.SSL_CERTIFICATE}}" | base64 --decode > config/ssl/certificate.crt

            npm install -f
            cd ..

            docker compose up -d
