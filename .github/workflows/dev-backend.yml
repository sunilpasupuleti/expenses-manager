name: Backend Dev CI/CD

on:
  push:
    branches: [development]

jobs:
  setup-and-deploy:
    uses: ./.github/workflows/setup-gpg.yml
    with:
      gpg_key_email: "sunil.pandvd22@gmail.com"
    secrets:
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  build-and-deploy:
    needs: setup-and-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install SOPS
        run: |
          sudo apt-get install -y gnupg
          wget https://github.com/getsops/sops/releases/download/v3.7.3/sops-v3.7.3.linux -O sops
          chmod +x sops
          sudo mv sops /usr/local/bin/sops

      - name: Decrypt .env.development.enc
        run: |
          export SOPS_GPG_EXEC=gpg
          export GPG_TTY=$(tty)
          sops -d backend/config/.env.development.enc > backend/config/.env.development

      - name: Decrypt expensesmanager.json
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$GPG_PASSPHRASE" \
            --output backend/config/expensesmanager.json backend/config/expensesmanager.json.enc
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Upload .env.development to VPS
        run: |
          sshpass -p "${{ secrets.PASS_WORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.HOST_NAME }} "mkdir -p /expenses-manager/dev/backend/config"
          sshpass -p "${{ secrets.PASS_WORD }}" scp -o StrictHostKeyChecking=no backend/config/.env.development ${{ secrets.HOST_NAME }}:/expenses-manager/dev/backend/config/.env.development

      - name: Upload expensesmanager.json to VPS
        run: |
          sshpass -p "${{ secrets.PASS_WORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.HOST_NAME }} "mkdir -p /expenses-manager/dev/backend/config"
          sshpass -p "${{ secrets.PASS_WORD }}" scp backend/config/expensesmanager.json ${{ secrets.HOST_NAME }}:/expenses-manager/dev/backend/config/expensesmanager.json

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker image (dev)
        run: docker build -f backend/Dockerfile.dev -t expenses-manager-backend-dev .

      - name: Tag Docker image
        run: docker tag expenses-manager-backend-dev sunilpasupuleti/expenses-manager-backend-dev:latest

      - name: Push image to Docker Hub
        run: docker push sunilpasupuleti/expenses-manager-backend-dev:latest

      - name: Clean up decrypted files
        run: |
          rm backend/config/.env.development
          rm backend/config/expensesmanager.json
